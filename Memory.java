import java.io.*;

public class Memory {
    private int[] memory;

    public Memory(){
        memory = new int[4096];
        loadFont();
    }

    public void loadFont(){
        int[] fonts = {
            0xF0, 0x90, 0x90, 0x90, 0xF0,
            0x20, 0x60, 0x20, 0x20, 0x70,
            0xF0, 0x10, 0xF0, 0x80, 0xF0,
            0xF0, 0x10, 0xF0, 0x10, 0xF0,
            0x90, 0x90, 0xF0, 0x10, 0x10,
            0xF0, 0x80, 0xF0, 0x10, 0xF0,
            0xF0, 0x80, 0xF0, 0x90, 0xF0, 
            0xF0, 0x10, 0x20, 0x40, 0x40, 
            0xF0, 0x90, 0xF0, 0x90, 0xF0, 
            0xF0, 0x90, 0xF0, 0x10, 0xF0, 
            0xF0, 0x90, 0xF0, 0x90, 0x90, 
            0xE0, 0x90, 0xE0, 0x90, 0xE0, 
            0xF0, 0x80, 0x80, 0x80, 0xF0, 
            0xE0, 0x90, 0x90, 0x90, 0xE0, 
            0xF0, 0x80, 0xF0, 0x80, 0xF0,
            0xF0, 0x80, 0xF0, 0x80, 0x80 
        };
        for(int i = 0; i < fonts.length; i++){
            memory[i+80] = fonts[i];
        }
    }

    public void initalizeRom(String path) throws IOException{
        File file = new File(path);
        byte[] arrr;
        try (FileInputStream inputStream = new FileInputStream(file)){
            arrr = inputStream.readAllBytes();
            for(int i = 0; i<arrr.length; i++){
                memory[i+0x200] = arrr[i];
            }
        }
    }

    public int getInstruction(int PC) {
        int instruction = (memory[PC] << 8) | (memory[PC+1] & 0xFF);
        return instruction;
    }

    public int getByte(int i){
        return memory[i];
    }

    public void setByte(int i, int val){
        memory[i] = val;
    }
}
